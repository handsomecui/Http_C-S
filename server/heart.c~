#include "common.h"
#include "heart.h"

s_t *s_head;
volatile g_stop = 1;
//extern volatile go_stop;
void init_shead(){
	//s_head = (s_t *)malloc(sizeof(s_t));
}

void heart_handler(int sockfd,DATA_PACK *pd)
{
	s_t *cur = s_head->next; 


	while( NULL != cur){

		if(strcmp(cur->name,pd->name) == 0){

		    cur->count = 0; 

		    printf("客户端IP： %s ：用户 %s 连接正常\n",cur->peerip,pd->name);
    		} 
		cur->count = 0; 
		cur = cur->next;
    	}
}

 void *heart_check(void *p)
{
	printf("心跳检测线程已开启！\n");
	g_stop = 1;
	while(g_stop){
		check_handler(); 
		sleep(3); 
//		printf("stop = %d\n", g_stop);
	}
//	puts("******");
	pthread_exit((void *)1);
}

void check_handler(){

	s_t *temp = NULL; 

	s_t **ppNode = &s_head->next;

	while(NULL != (*ppNode)){

		if((*ppNode)->count == 5){
			g_stop = 0;
			//go_stop = 0;
			printf("客户端IP： %s ：用户 %s 已经掉线！！\n",(*ppNode)->peerip,(*ppNode)->name);

			close((*ppNode)->sockfd); 

			temp = *ppNode; 

			*ppNode = (*ppNode)->next;

			free(temp); 

			temp = NULL;
			
		}
		else if((*ppNode)->count > 0){

			//printf("客户端IP： %s ：用户 %s 连接异常！\n",(*ppNode)->peerip,(*ppNode)->name);

			(*ppNode)->count++;

			//printf("count = %d\n",(*ppNode)->count);

			ppNode = &((*ppNode)->next); 

			continue;
		}
		else if((*ppNode)->count == 0){

			(*ppNode)->count++;
			
			//printf("count = %d\n",(*ppNode)->count);
			
			ppNode = &((*ppNode)->next); 
		}
		else;
	} 

}


